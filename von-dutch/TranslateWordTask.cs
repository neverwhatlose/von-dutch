using Spectre.Console;
using System.Reflection;
using System.Text.Json;

namespace von_dutch
{
    public class TranslateWordTask : TaskCore
    {
        public override string Title { get; } = "–ü–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤–∞";
        public override bool NeedsData { get; } = true;

        public override void Execute(AppContext context)
        {
            Console.Clear();
            
            AnsiConsole.Write(new FigletText("VON DUTCH").LeftJustified().Color(Color.Blue));
            
            if (context.IsDataLoaded == false)
            {
                AnsiConsole.MarkupLine("[red]–î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ[/]");
                Console.ReadKey();
                return;
            }

            List<Dictionary<string, object>> availableDicts = [];
            Dictionary<Dictionary<string, object>, string> dictNames = [];

            foreach (PropertyInfo property in context.GetType().GetProperties())
            {
                if (property.PropertyType != typeof(Dictionary<string, object>))
                {
                    continue;
                }

                if (property.GetValue(context) is not Dictionary<string, object> dict)
                {
                    continue;
                }

                DictFileAttribute? attr = property.GetCustomAttribute<DictFileAttribute>();
                string displayName = attr != null ? attr.FileName : property.Name;
                availableDicts.Add(dict);
                dictNames[dict] = displayName;
            }

            Dictionary<string, object> selectedDict = AnsiConsole.Prompt(
                new SelectionPrompt<Dictionary<string, object>>()
                    .Title("[grey]–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å[/]")
                    .HighlightStyle(new Style(foreground: Color.Green))
                    .MoreChoicesText("[grey](–ù–∞–∂–∏–º–∞–π—Ç–µ üîº –∏ üîΩ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –±–æ–ª—å—à–µ —Å–ø–∏—Å–æ–∫)[/]")
                    .AddChoices(availableDicts)
                    .UseConverter(dict => dictNames[dict])
            );

            string word = AnsiConsole.Prompt(
                new TextPrompt<string>("[green]–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ[/]")
                    .Validate(word => word.Length == 0 || string.IsNullOrWhiteSpace(word) ? ValidationResult.Error("[red]–°–ª–æ–≤–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º[/]") : ValidationResult.Success()));
            
            
            // –ù—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —á–µ–º —è–≤–ª—è–µ—Ç—Å—è translation
            // 1. –µ—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞, —Ç–æ –ø—Ä–æ—Å—Ç–æ –≤—ã–≤–µ—Å—Ç–∏
            // 2. –µ—Å–ª–∏ –º–∞—Å—Å–∏–≤, —Ç–æ –≤—ã–≤–µ—Å—Ç–∏ –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã
            if (selectedDict.TryGetValue(word, out object? translation))
            {
                switch (translation)
                {
                    case string ans:
                        AnsiConsole.MarkupLine($"[green]–ü–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤–∞[/]: {word} - {ans}");
                        break;
                    case JsonElement { ValueKind: JsonValueKind.Array } jsonElement:
                        {
                            foreach (JsonElement element in jsonElement.EnumerateArray())
                            {
                                AnsiConsole.MarkupLine($"[green]–ü–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤–∞[/]: {word} - {element.GetString()}");
                            }

                            break;
                        }
                    case JsonElement jsonElement:
                        AnsiConsole.MarkupLine($"[green]–ü–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤–∞[/]: {word} - {jsonElement.GetString()}");
                        break;
                }
            }
            else
            {
                AnsiConsole.MarkupLine($"[red]–°–ª–æ–≤–æ[/] {word} [red]–Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Å–ª–æ–≤–∞—Ä–µ[/]");
            }
        }
    }
}