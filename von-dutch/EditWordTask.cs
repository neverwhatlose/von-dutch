using Spectre.Console;

namespace von_dutch
{
    public class EditWordTask : TaskCore
    {
        public override bool NeedsData { get; } = true;
        public override string Title { get; } = "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ª–æ–≤–∞";

        public override void Execute(AppContext context)
        {
            Dictionary<string, object> selectedDict = SelectDictionary(context);
            
            string wordToEdit = AnsiConsole.Prompt(
                new TextPrompt<string>("[green]–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ[/]")
                    .Validate(word => word.Length == 0 || string.IsNullOrWhiteSpace(word) ? ValidationResult.Error("[red]–°–ª–æ–≤–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º[/]") : ValidationResult.Success()));

            if (!selectedDict.TryGetValue(wordToEdit, out object? value))
            {
                AnsiConsole.MarkupLine("[red]–°–ª–æ–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Å–ª–æ–≤–∞—Ä–µ[/]");
                return;
            }

            string choice = AnsiConsole.Prompt(
                new SelectionPrompt<string>()
                    .Title("[grey]–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ[/]")
                    .HighlightStyle(new Style(foreground: Color.Green))
                    .MoreChoicesText("[grey](–ù–∞–∂–∏–º–∞–π—Ç–µ üîº –∏ üîΩ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –±–æ–ª—å—à–µ —Å–ø–∏—Å–æ–∫)[/]")
                    .AddChoices("–ò–∑–º–µ–Ω–∏—Ç—å —Å–ª–æ–≤–æ", "–ò–∑–º–µ–Ω–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥", "–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ")
            );
            
            switch (choice)
            {
                case "–ò–∑–º–µ–Ω–∏—Ç—å —Å–ª–æ–≤–æ":
                {
                    string newWord = AnsiConsole.Prompt(
                        new TextPrompt<string>("[green]–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ[/]")
                            .Validate(word => word.Length == 0 || string.IsNullOrWhiteSpace(word) ? ValidationResult.Error("[red]–°–ª–æ–≤–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º[/]") : ValidationResult.Success()));
                    selectedDict[newWord] = value;
                    selectedDict.Remove(wordToEdit);
                    AnsiConsole.MarkupLine("[green]–°–ª–æ–≤–æ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ![/]");
                    break;
                }
                case "–ò–∑–º–µ–Ω–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥":
                {
                    string translation = AnsiConsole.Prompt(
                        new TextPrompt<string>($"[green]–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–µ—Ä–µ–≤–æ–¥ –¥–ª—è {wordToEdit}[/]")
                            .Validate(translation => translation.Length == 0 || string.IsNullOrWhiteSpace(translation) ? ValidationResult.Error("[red]–°–ª–æ–≤–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º[/]") : ValidationResult.Success()));
                    selectedDict[wordToEdit] = translation;
                    AnsiConsole.MarkupLine("[green]–ü–µ—Ä–µ–≤–æ–¥ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω![/]");
                    break;
                }
                case "–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ":
                {
                    selectedDict.Remove(wordToEdit);
                    AnsiConsole.MarkupLine("[green]–°–ª–æ–≤–æ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ![/]");
                    break;
                }
            }
            
            DataController.UpdateData(context);
        }
    }
}